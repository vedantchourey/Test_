create table games
(
    id           bigint generated by default as identity,
    display_name text not null,
    code         text not null,
    constraint pk_games primary key (id)
);

create unique index ix_games_name on games (display_name);
create unique index ix_games_code on games (code);

alter table games enable row level security;
create
policy anon_read_games on games
    for
select
    using (auth.role() = 'anon');

create table platforms
(
    id           bigint generated by default as identity,
    display_name text not null,
    code         text not null,
    constraint pk_platforms primary key (id)
);

create unique index ix_platforms_code on platforms (code);
create unique index ix_platforms_display_name on platforms (display_name);

alter table platforms enable row level security;
create
policy anon_read_platforms on platforms
    for
select
    using (auth.role() = 'anon');

create table game_platforms
(
    game_id     bigint not null,
    platform_id bigint not null,
    constraint pk_game_platform primary key (game_id, platform_id),
    constraint fk_game_platform_games_id foreign key (game_id) references games (id) on delete cascade,
    constraint fk_game_platform_platforms_id foreign key (platform_id) references platforms (id) on delete cascade
);

create index ix_game_platform_platforms_id on game_platforms (platform_id);

alter table game_platforms enable row level security;
create
policy anon_read_game_platforms on game_platforms
    for
select
    using (auth.role() = 'anon');

INSERT INTO games (id, display_name, code)
VALUES (1, 'FIFA 22', 'FIFA_22');

INSERT INTO games (id, display_name, code)
VALUES (2, 'CS:GO 2', 'CSG_O2');

INSERT INTO games (id, display_name, code)
VALUES (3, 'CALL OF DUTY', 'CALL_OF_DUTY');

INSERT INTO games (id, display_name, code)
VALUES (4, 'PUBG', 'PUBG');

INSERT INTO games (id, display_name, code)
VALUES (5, 'F1 2021', 'F1_2021');

INSERT INTO games (id, display_name, code)
VALUES (6, 'VALORANT', 'VALORANT');

INSERT INTO games (id, display_name, code)
VALUES (7, 'OVERWATCH', 'OVERWATCH');

INSERT INTO games (id, display_name, code)
VALUES (8, 'DOTA 2', 'DOTA_2');

INSERT INTO games (id, display_name, code)
VALUES (9, 'MORTAL KOMBAT X', 'MORTAL_KOMBAT_X');

INSERT INTO games (id, display_name, code)
VALUES (10, 'FORTNITE', 'FORTNITE');

INSERT INTO games (id, display_name, code)
VALUES (11, 'APEX LEGENDS', 'APEX_LEGENDS');

INSERT INTO games (id, display_name, code)
VALUES (12, 'ROCKET LEAGUE', 'ROCKET_LEAGUE');

INSERT INTO platforms (id, display_name, code)
VALUES (1, 'PS5', 'PS5');

INSERT INTO platforms (id, display_name, code)
VALUES (2, 'PC', 'PC');

INSERT INTO platforms (id, display_name, code)
VALUES (3, 'PS4', 'PS4');

INSERT INTO platforms (id, display_name, code)
VALUES (4, 'Mobile', 'MOBILE');

INSERT INTO platforms (id, display_name, code)
VALUES (5, 'XBOX', 'XBOX');

INSERT INTO game_platforms (game_id, platform_id)
VALUES (1, 1);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (1, 5);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (2, 2);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (3, 1);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (3, 2);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (3, 4);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (4, 2);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (4, 4);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (5, 1);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (6, 2);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (7, 2);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (7, 3);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (7, 5);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (8, 2);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (9, 1);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (9, 5);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (10, 3);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (10, 4);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (10, 5);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (11, 1);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (11, 2);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (11, 3);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (11, 4);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (11, 5);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (12, 1);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (12, 3);

INSERT INTO game_platforms (game_id, platform_id)
VALUES (12, 5);

SELECT setval(
               pg_get_serial_sequence('games', 'id'),
               GREATEST(
                           (SELECT MAX(id) FROM games) + 1,
                           nextval(pg_get_serial_sequence('games', 'id'))),
               false);
SELECT setval(
               pg_get_serial_sequence('platforms', 'id'),
               GREATEST(
                           (SELECT MAX(id) FROM platforms) + 1,
                           nextval(pg_get_serial_sequence('platforms', 'id'))),
               false);

create table game_maps
(
    id           bigint generated by default as identity,
    game_id      bigint not null,
    display_name text   not null,
    code         text   not null,
    constraint pk_game_maps primary key (id),
    constraint fk_game_maps_games_id foreign key (game_id) references games (id) on delete cascade
);

create unique index ix_game_maps_code on game_maps (code);
create unique index ix_game_maps_display_name on game_maps (display_name);
create index ix_game_maps_game_id on game_maps (game_id);

alter table game_maps enable row level security;
create
policy anon_read_game_maps on game_maps
    for
select
    using (auth.role() = 'anon');

create table match_best_ofs
(
    id               bigint generated by default as identity,
    display_name     text    not null,
    code             text    not null,
    number_of_rounds integer not null,
    constraint pk_match_best_ofs primary key (id)
);

create unique index ix_match_best_ofs_code on match_best_ofs (code);
create unique index ix_match_best_ofs_display_name on match_best_ofs (display_name);

alter table match_best_ofs enable row level security;
create
policy anon_read_match_best_ofs on match_best_ofs
    for
select
    using (auth.role() = 'anon');

create table match_formats
(
    id                  bigint generated by default as identity,
    display_name        text    not null,
    code                text    not null,
    people_in_each_team integer not null,
    constraint pk_match_formats primary key (id)
);

create unique index ix_match_formats_code on match_formats (code);
create unique index ix_match_formats_display_name on match_formats (display_name);
create index ix_match_formats_people_in_each_team on match_formats (people_in_each_team);

alter table match_formats enable row level security;
create
policy anon_read_match_formats on match_formats
    for
select
    using (auth.role() = 'anon');

create table game_match_best_ofs
(
    best_ofs_id bigint not null,
    game_id     bigint not null,
    constraint pk_game_match_best_of primary key (best_ofs_id, game_id),
    constraint fk_game_match_best_of_games_id foreign key (game_id) references games (id) on delete cascade,
    constraint fk_game_match_best_of_match_best_ofs_id foreign key (best_ofs_id) references match_best_ofs (id) on delete cascade
);

create index ix_game_match_best_of_game_id on game_match_best_ofs (game_id);

alter table game_match_best_ofs enable row level security;
create
policy anon_read_game_match_best_of on game_match_best_ofs
    for
select
    using (auth.role() = 'anon');

create table game_match_formats
(
    format_id bigint not null,
    game_id   bigint not null,
    constraint pk_game_match_format primary key (format_id, game_id),
    constraint fk_game_match_format_games_id foreign key (game_id) references games (id) on delete cascade,
    constraint fk_game_match_format_match_formats_id foreign key (format_id) references match_formats (id) on delete cascade
);

create index ix_game_match_format_game_id on game_match_formats (game_id);

alter table game_match_formats enable row level security;
create
policy anon_read_game_match_format on game_match_formats
    for
select
    using (auth.role() = 'anon');


INSERT INTO match_best_ofs (id, display_name, code, number_of_rounds)
VALUES (1, 'Best of 1', 'BEST_OF_1', 1);

INSERT INTO match_best_ofs (id, display_name, code, number_of_rounds)
VALUES (2, 'Best of 2', 'BEST_OF_2', 2);

INSERT INTO match_best_ofs (id, display_name, code, number_of_rounds)
VALUES (3, 'Best of 3', 'BEST_OF_3', 3);

INSERT INTO match_best_ofs (id, display_name, code, number_of_rounds)
VALUES (4, 'Best of 4', 'BEST_OF_4', 4);

INSERT INTO match_best_ofs (id, display_name, code, number_of_rounds)
VALUES (5, 'Best of 5', 'BEST_OF_5', 5);

INSERT INTO match_best_ofs (id, display_name, code, number_of_rounds)
VALUES (6, 'Best of 6', 'BEST_OF_6', 6);

INSERT INTO match_best_ofs (id, display_name, code, number_of_rounds)
VALUES (7, 'Best of 30', 'BEST_OF_30', 30);

INSERT INTO match_formats (id, display_name, code, people_in_each_team)
VALUES (1, '1v1', '1v1', 1);

INSERT INTO match_formats (id, display_name, code, people_in_each_team)
VALUES (2, '2v2', '2v2', 2);

INSERT INTO match_formats (id, display_name, code, people_in_each_team)
VALUES (3, '3v3', '3v3', 3);

INSERT INTO match_formats (id, display_name, code, people_in_each_team)
VALUES (4, '4v4', '4v4', 4);

INSERT INTO match_formats (id, display_name, code, people_in_each_team)
VALUES (5, '5v5', '5v5', 5);

INSERT INTO match_formats (id, display_name, code, people_in_each_team)
VALUES (6, '6v6', '6v6', 6);

INSERT INTO match_formats (id, display_name, code, people_in_each_team)
VALUES (7, '11v11', '11v11', 11);

SELECT setval(
               pg_get_serial_sequence('match_best_ofs', 'id'),
               GREATEST(
                           (SELECT MAX(id) FROM match_best_ofs) + 1,
                           nextval(pg_get_serial_sequence('match_best_ofs', 'id'))),
               false);
SELECT setval(
               pg_get_serial_sequence('match_formats', 'id'),
               GREATEST(
                           (SELECT MAX(id) FROM match_formats) + 1,
                           nextval(pg_get_serial_sequence('match_formats', 'id'))),
               false);


create table tournaments
(
    id                     bigint generated by default as identity,
    tournament_name        text    not null,
    game_id                bigint  not null,
    platform_id            bigint  not null,
    best_of_id             bigint  not null,
    map_id                 bigint NULL,
    format_id              bigint  not null,
    schedule_date          timestamp without time zone not null,
    rules                  text    not null,
    is_team_participating  boolean not null,
    number_of_participants bigint  not null,
    tournament_type        text    not null,
    is_open_to_public      boolean not null DEFAULT FALSE,
    constraint pk_tournaments primary key (id),
    constraint fk_tournaments_game_maps_id foreign key (map_id) references game_maps (id) on DELETE RESTRICT,
    constraint fk_tournaments_games_id foreign key (game_id) references games (id) on DELETE RESTRICT,
    constraint fk_tournaments_match_best_ofs_id foreign key (best_of_id) references match_best_ofs (id) on DELETE RESTRICT,
    constraint fk_tournaments_match_formats_id foreign key (format_id) references match_formats (id) on DELETE RESTRICT,
    constraint fk_tournaments_platforms_id foreign key (platform_id) references platforms (id) on DELETE RESTRICT
);

create index ix_tournaments_best_of_id on tournaments (best_of_id);
create index ix_tournaments_format_id on tournaments (format_id);
create index ix_tournaments_game_id on tournaments (game_id);
create index ix_tournaments_map_id on tournaments (map_id);
create index ix_tournaments_platform_id on tournaments (platform_id);

alter table tournaments enable row level security;
create
policy anon_read_tournaments on tournaments
    for
select
    using (auth.role() = 'anon');


create table countries
(
    id           bigint generated by default as identity,
    iso_code     text not null,
    display_name text not null,
    constraint pk_countries primary key (id)
);

create unique index ix_countries_display_name on countries (display_name);
create unique index ix_countries_iso_code on countries (iso_code);

alter table countries enable row level security;
create
policy anon_read_countries on countries
    for
select
    using (auth.role() = 'anon');

create table states
(
    id           bigint generated by default as identity,
    iso_code     text   not null,
    display_name text   not null,
    country_id   bigint not null,
    constraint pk_states primary key (id),
    constraint fk_states_countries_id foreign key (country_id) references countries (id) on delete cascade
);

create index ix_states_country_id on states (country_id);
create unique index ix_states_iso_code on states (iso_code);

alter table states enable row level security;
create
policy anon_read_states on states
    for
select
    using (auth.role() = 'anon');


INSERT INTO countries (id, iso_code, display_name)
VALUES (1, 'IND', 'India');

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (1, 'IN-AP', 'Andhra Pradesh', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (2, 'IN-AR', 'Arunachal Pradesh', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (3, 'IN-AS', 'Assam', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (4, 'IN-BR', 'Bihar', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (5, 'IN-CT', 'Chhattisgarh', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (6, 'IN-GA', 'Goa', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (7, 'IN-GJ', 'Gujarat', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (8, 'IN-HR', 'Haryana', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (9, 'IN-HP', 'Himachal Pradesh', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (10, 'IN-JH', 'Jharkhand', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (11, 'IN-KA', 'Karnataka', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (12, 'IN-KL', 'Kerala', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (13, 'IN-MP', 'Madhya Pradesh', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (14, 'IN-MH', 'Maharashtra', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (15, 'IN-MN', 'Manipur', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (16, 'IN-ML', 'Meghalaya', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (17, 'IN-MZ', 'Mizoram', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (18, 'IN-NL', 'Nagaland', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (19, 'IN-OR', 'Odisha', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (20, 'IN-PB', 'Punjab', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (21, 'IN-RJ', 'Rajasthan', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (22, 'IN-SK', 'Sikkim', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (23, 'IN-TN', 'Tamil Nadu', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (24, 'IN-TG', 'Telangana', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (25, 'IN-TR', 'Tripura', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (26, 'IN-UT', 'Uttarakhand', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (27, 'IN-UP', 'Uttar Pradesh', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (28, 'IN-WB', 'West Bengal', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (29, 'IN-AN', 'Andaman and Nicobar Islands', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (30, 'IN-CH', 'Chandigarh', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (31, 'IN-DH', 'Dadra and Nagar Haveli and Daman and Diu', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (32, 'IN-DL', 'Delhi', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (33, 'IN-JK', 'Jammu and Kashmir', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (34, 'IN-LA', 'Ladakh', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (35, 'IN-LD', 'Lakshadweep', 1);

INSERT INTO states (id, iso_code, display_name, country_id)
VALUES (36, 'IN-PY', 'Puducherry (Pondicherry)', 1);

SELECT setval(
               pg_get_serial_sequence('countries', 'id'),
               GREATEST(
                           (SELECT MAX(id) FROM countries) + 1,
                           nextval(pg_get_serial_sequence('countries', 'id'))),
               false);
SELECT setval(
               pg_get_serial_sequence('states', 'id'),
               GREATEST(
                           (SELECT MAX(id) FROM states) + 1,
                           nextval(pg_get_serial_sequence('states', 'id'))),
               false);


